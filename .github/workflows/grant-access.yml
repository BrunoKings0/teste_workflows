name: Issue â†’ Grant Access PR

on:
  issues:
    types: [opened]

jobs:
  handle-grant:
    runs-on: ubuntu-latest  
    steps:
    - name: Set up Git to authenticate with token
      run: |
        git config --global url."https://${{ secrets.GITHUB_TOKEN }}@github.com/BrunoKings0/".insteadOf "https://github.com/BrunoKings0/"

    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Checkout dev branch
      run: |
        git fetch origin dev:dev
        git checkout dev
        git pull origin dev

    - name: Configure python
      uses: actions/setup-python@v6
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install python-hcl2==7.3.1

    - name: Parse issue data
      id: parse
      env:
        ISSUE_BODY: ${{ github.event.issue.body }}
      run: |
        AwsTeam=$(echo "$ISSUE_BODY" | grep -E '^AwsTeam:' | sed -E 's/^AwsTeam:[[:space:]]*//')
        echo "AwsTeam='$AwsTeam'"

        personal="[]"
        confidential="[]"
        strictly="[]"

        tmp=$(awk '/Personal:/ {
          if (match($0, /\[[^]]*\]/)) {
            print substr($0, RSTART, RLENGTH)
            exit
          }
        }' <<< "$ISSUE_BODY")
        if [ -n "$tmp" ]; then
          personal="$tmp"
        fi

        tmp=$(awk '/Confidential:/ {
          if (match($0, /\[[^]]*\]/)) {
            print substr($0, RSTART, RLENGTH)
            exit
          }
        }' <<< "$ISSUE_BODY")
        if [ -n "$tmp" ]; then
          confidential="$tmp"
        fi

        tmp=$(awk '/Strictly Confidential:/ {
          if (match($0, /\[[^]]*\]/)) {
            print substr($0, RSTART, RLENGTH)
            exit
          }
        }' <<< "$ISSUE_BODY")
        if [ -n "$tmp" ]; then
          strictly="$tmp"
        fi

        echo "Personal=$personal"
        echo "Confidential=$confidential"
        echo "Strictly=$strictly"

        echo "aws_team=$AwsTeam" >> $GITHUB_OUTPUT
        echo "personal_list=$personal" >> $GITHUB_OUTPUT
        echo "confidential_list=$confidential" >> $GITHUB_OUTPUT
        echo "strictly_list=$strictly" >> $GITHUB_OUTPUT

    - name: Prepare branch
      id: branch
      run: |
        AWS_TEAM="${{ steps.parse.outputs.aws_team }}"
        PR_BRANCH="grant-${AWS_TEAM}-${{ github.event.issue.number }}"
        echo "branch=$PR_BRANCH" >> $GITHUB_OUTPUT
        git checkout -b "$PR_BRANCH"

    - name: Debug
      run: |
        pwd
        ls -R .

    - name: Generate patch (Python)
      id: gen_patch
      env:
        TF_TEAM: ${{ steps.parse.outputs.aws_team }}
        TF_PERSONAL: ${{ steps.parse.outputs.personal_list }}
        TF_CONFIDENCIAL: ${{ steps.parse.outputs.confidential_list }}
        TF_STRICTLY: ${{ steps.parse.outputs.strictly_list }}             
             
      run: |
        python scripts/patch_tfvars.py > patch_out.txt
        
    - name: Show patch output
      run: |
        echo "=== Contents of patch_out.txt ==="
        cat patch_out.txt
        echo "================================="

    - name: Apply patch to production.tfvars
      run: |
        LINE=$(head -n 1 patch_out.txt)
        MODE=$(echo "$LINE" | cut -d '|' -f1)
        PATCH=$(sed '1s/^[^|]*|//g' patch_out.txt)

        echo "Mode: $MODE"
        echo "Patch:"
        echo "$PATCH"

        if [ "$MODE" = "insert" ]; then
          awk -v patch="$PATCH" '
            BEGIN {in_block=0}
            /^team_table_tags.*= *{/ {in_block=1}
            in_block && /^}/ {
              if (substr($0, length($0), 1) != ",") {
                print "  " patch
              } else {
                print "  " patch ","
              }
              in_block=0
            }
            {print}
          ' conf/production.tfvars > tmp.tfvars
          mv tmp.tfvars conf/production.tfvars

        elif [ "$MODE" = "append" ]; then
          aws_team="${{ steps.parse.outputs.aws_team }}"
          awk -v team="$aws_team" -v patch="$PATCH" '
            BEGIN {
              skip = 0
              depth = 0
              found_team = 0
            }
            {
              if (skip) {
                nopen = gsub(/\[/, "[", $0)
                nclose = gsub(/\]/, "]", $0)
                depth += nopen - nclose
                if (depth <= 0) {
                  skip = 0
                }
                next
              }
              pattern = "^[[:space:]]*" team "[[:space:]]*= *\\[" 
              if ($0 ~ pattern) {
                skip = 1
                depth = 1
                found_team = 1
                next
              }
              if (found_team && $0 ~ /^[[:space:]]*\](,)?[[:space:]]*$/) {
                print "  " patch ","
                found_team = 0
              }
              next
            }
            {print}
          ' conf/production.tfvars > tmp.tfvars
          mv tmp.tfvars conf/production.tfvars

        else
          echo "No changes needed or unknown mode"
        fi

    - name: Commit and push tfvars change
      run: |
        git config user.name "${{ github.actor }}"
        git config user.email "${{ github.actor }}@users.noreply.github.com"
        git add conf/production.tfvars
        git commit -m "Update production.tfvars for ${{ steps.parse.outputs.aws_team }}" || echo "No changes to commit"
        git push origin "${{ steps.branch.outputs.branch }}"
